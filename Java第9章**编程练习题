//**9.9 几何：正n边形
import java.util.Scanner; 

public class Test {
	public static void main(String[] args) {
		RegularPolygon g1 = new RegularPolygon();		
		System.out.println("g1 perimeter:" + g1.getPerimeter() + "    " + "g1 area:" + g1.getArea());		
		RegularPolygon g2 = new RegularPolygon(6,4);	
		System.out.println("g2 perimeter:" + g2.getPerimeter() + "    " + "g2 area:" + g2.getArea());	
		RegularPolygon g3 = new RegularPolygon(10,4,5.6,7.8);	
		System.out.println("g3 perimeter:" + g3.getPerimeter() + "    " + "g3 area:" + g3.getArea());
	}
}

public class RegularPolygon {
	private int n;	
	private double side;
	private double x;	
	private double y;	
	public RegularPolygon(){	
		n = 3;	
		side = 1;	
		x = 0;	
		y = 0;	
	}	
	
	public RegularPolygon(int num, double len){	
		n = num;	
		side = len;	
		x = 0;	
		y = 0;	
	}
	
	public RegularPolygon(int num, double len, double a, double b){	
		n = num;	
		side = len;	
		x = a;	
		y = b;	
	}	
	
	public int getN(){	
		return n;	
	}
	
	public void setN(int num){	
		n = num;	
	}	
	
	public double getSide(){	
		return side;	
	}
	
	public void setSide(double len){
		side = len;	
	}	
	
	public double getX(){	
		return x;	
	}
	
	public void setX(double X){		
		x = X;	
	}	
	
	public double getY(){	
		return y;	
	}	
	
	public void setY(double Y){	
		y = Y;	
	}	
	
	public double getPerimeter(){	
		return n*side;	
	}
	
	public double getArea(){	
		return (n*side*side)/(4*Math.tan(Math.PI/n));	
	}
}

//**9.12 几何：交点
import java.util.Scanner; 

public class Test {
	public static void main(String[] args) {
		Scanner cin = new Scanner(System.in);	
		double x1,y1,x2,y2,x3,y3,x4,y4;		
		System.out.print("Enter x1,y1,x2,y2,x3,y3,x4,y4: ");	
		x1 = cin.nextDouble();		
		y1 = cin.nextDouble();		
		x2 = cin.nextDouble();		
		y2 = cin.nextDouble();		
		x3 = cin.nextDouble();	
		y3 = cin.nextDouble();	
		x4 = cin.nextDouble();	
		y4 = cin.nextDouble();		
		double a,b,c,d,e,f;		
		a = y1 - y2;		
		b = -(x1 - x2);		
		c = y3 - y4;		
		d = -(x3 - x4);	
		e = (y1-y2)*x1 - (x1-x2)*y1;	
		f = (y3-y4)*x3 - (x3-x4)*y3;	
		LinearEquation expr = new LinearEquation(a,b,c,d,e,f);		
		
		if(expr.isSolvable())
			System.out.println("The intersecting point is at (" + expr.getX() + ", " + expr.getY() + ")");	
		else
			System.out.println("The tow line are parallel");
	}
}

public class LinearEquation {
	private double a,b,c,d,e,f;	
	public LinearEquation(double v1, double v2, double v3, double v4, double v5, double v6){	
		a = v1;	
		b = v2;		
		c = v3;		
		d = v4;		
		e = v5;	
		f = v6;	
	}	
	
	public double getA(){		
		return a;	
	}	
	
	public double getB(){	
		return b;	
	}	
	
	public double getC(){	
		return c;	
	}	
	
	public double getD(){	
		return d;	
	}	
	
	public double getE(){
		return e;
	}
	
	public double getF(){	
		return f;	
	}
	
	public boolean isSolvable(){	
		if((a*d-b*c) != 0)		
			return true;	
		else		
			return false;	
	}	
	
	public double getX(){	
		return (e*d-b*f)/(a*d-b*c);	
	}	
	
	public double getY(){	
		return (a*f-e*c)/(a*d-b*c);	
	}
}

//**9.13 位置类Location
//Great a Scanner
		 Scanner input = new Scanner(System.in);
		 //Enter array value;
		int row,column;
		System.out.print("Enter the number of rows and columns in the array:");
		row = input.nextInt();
		column = input.nextInt();
		double [][] m = new double[row][column];
		for(int i = 0;i<row;i++){
			for(int j = 0;j<column;j++){
				m[i][j] = input.nextDouble();
			}
			//System.out.printf("\n");
		}
		//Found the maxNumber;
		double maxValue = m[0][0];
		int g=0,h=0;
		
		for(int i = 0;i<row;i++){
			for(int j = 0;j<column;j++){
				if(m[i][j]>maxValue)
				{
					maxValue = m[i][j];
					g=i;
					h=j;
				}
			}
		}
		System.out.println("Maxvalue is " + maxValue + " at(" + g + " " + h + ")");
	}

}
public class LinearEquartion {
		int a,b,c,d,e,f;
		LinearEquartion(int a,int b,int c,int d,int e,int f){
			this.a = a;
			this.b = b;
			this.c = c;
			this.d = d;
			this.e = e;
			this.f = f;
		}
		int getA() {
			return a;
		}
		int getB() {
			return b;
		}
		int getC() {
			return c;
		}
		int getD() {
			return d;
		}
		int getE() {
			return e;
		}
		int getF() {
			return f;
		}
		boolean isSolvablee() {
			return a * d - b * c != 0 ? true:false;
		}
		int getX(){
			return (e * d - b * f) / (a * d - b * c);
		}
		int getY(){
			return (a * f - e * c) / (a * d - b * c);
		}	
	
}
9.12
import java.util.Scanner;
public class Location {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//Great a Scanner
		 Scanner input = new Scanner(System.in);
		 //Enter array value;
		int row,column;
		System.out.print("Enter the number of rows and columns in the array:");
		row = input.nextInt();
		column = input.nextInt();
		double [][] m = new double[row][column];
		for(int i = 0;i<row;i++){
			for(int j = 0;j<column;j++){
				m[i][j] = input.nextDouble();
			}
			//System.out.printf("\n");
		}
		//Found the maxNumber;
		double maxValue = m[0][0];
		int g=0,h=0;
		
		for(int i = 0;i<row;i++){
			for(int j = 0;j<column;j++){
				if(m[i][j]>maxValue)
				{
					maxValue = m[i][j];
					g=i;
					h=j;
				}
			}
		}
		System.out.println("Maxvalue is " + maxValue + " at(" + g + " " + h + ")");
	}
}
