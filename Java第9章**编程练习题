//**9.9 几何：正n边形
import java.util.Scanner; 

public class Test {
	public static void main(String[] args) {
		RegularPolygon g1 = new RegularPolygon();		
		System.out.println("g1 perimeter:" + g1.getPerimeter() + "    " + "g1 area:" + g1.getArea());		
		RegularPolygon g2 = new RegularPolygon(6,4);	
		System.out.println("g2 perimeter:" + g2.getPerimeter() + "    " + "g2 area:" + g2.getArea());	
		RegularPolygon g3 = new RegularPolygon(10,4,5.6,7.8);	
		System.out.println("g3 perimeter:" + g3.getPerimeter() + "    " + "g3 area:" + g3.getArea());
	}
}

public class RegularPolygon {
	private int n;	
	private double side;
	private double x;	
	private double y;	
	public RegularPolygon(){	
		n = 3;	
		side = 1;	
		x = 0;	
		y = 0;	
	}	
	
	public RegularPolygon(int num, double len){	
		n = num;	
		side = len;	
		x = 0;	
		y = 0;	
	}
	
	public RegularPolygon(int num, double len, double a, double b){	
		n = num;	
		side = len;	
		x = a;	
		y = b;	
	}	
	
	public int getN(){	
		return n;	
	}
	
	public void setN(int num){	
		n = num;	
	}	
	
	public double getSide(){	
		return side;	
	}
	
	public void setSide(double len){
		side = len;	
	}	
	
	public double getX(){	
		return x;	
	}
	
	public void setX(double X){		
		x = X;	
	}	
	
	public double getY(){	
		return y;	
	}	
	
	public void setY(double Y){	
		y = Y;	
	}	
	
	public double getPerimeter(){	
		return n*side;	
	}
	
	public double getArea(){	
		return (n*side*side)/(4*Math.tan(Math.PI/n));	
	}
}

//**9.12 几何：交点
import java.util.Scanner; 

public class Test {
	public static void main(String[] args) {
		Scanner cin = new Scanner(System.in);	
		double x1,y1,x2,y2,x3,y3,x4,y4;		
		System.out.print("Enter x1,y1,x2,y2,x3,y3,x4,y4: ");	
		x1 = cin.nextDouble();		
		y1 = cin.nextDouble();		
		x2 = cin.nextDouble();		
		y2 = cin.nextDouble();		
		x3 = cin.nextDouble();	
		y3 = cin.nextDouble();	
		x4 = cin.nextDouble();	
		y4 = cin.nextDouble();		
		double a,b,c,d,e,f;		
		a = y1 - y2;		
		b = -(x1 - x2);		
		c = y3 - y4;		
		d = -(x3 - x4);	
		e = (y1-y2)*x1 - (x1-x2)*y1;	
		f = (y3-y4)*x3 - (x3-x4)*y3;	
		LinearEquation expr = new LinearEquation(a,b,c,d,e,f);		
		
		if(expr.isSolvable())
			System.out.println("The intersecting point is at (" + expr.getX() + ", " + expr.getY() + ")");	
		else
			System.out.println("The tow line are parallel");
	}
}

public class LinearEquation {
	private double a,b,c,d,e,f;	
	public LinearEquation(double v1, double v2, double v3, double v4, double v5, double v6){	
		a = v1;	
		b = v2;		
		c = v3;		
		d = v4;		
		e = v5;	
		f = v6;	
	}	
	
	public double getA(){		
		return a;	
	}	
	
	public double getB(){	
		return b;	
	}	
	
	public double getC(){	
		return c;	
	}	
	
	public double getD(){	
		return d;	
	}	
	
	public double getE(){
		return e;
	}
	
	public double getF(){	
		return f;	
	}
	
	public boolean isSolvable(){	
		if((a*d-b*c) != 0)		
			return true;	
		else		
			return false;	
	}	
	
	public double getX(){	
		return (e*d-b*f)/(a*d-b*c);	
	}	
	
	public double getY(){	
		return (a*f-e*c)/(a*d-b*c);	
	}
}

//**9.13 位置类Location
import java.util.Scanner; 

public class Test {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);		
		System.out.print("Enter the number of rows and columns in the array: ");	
		int row = input.nextInt();	
		int column = input.nextInt();			
		double[][] array = new double[row][column];	
		System.out.println("Enter the array: ");
		for(int i = 0; i < array.length; i++){	
			for(int j = 0; j < array[1].length; j++){				
				array[i][j] = input.nextDouble();		
			}	
		}	
		input.close();	
		Location resultLocation = locateLargest(array);	
		System.out.println("The location of the largest element is " + resultLocation.maxValue +							" at (" + resultLocation.row + ", " + resultLocation.column + ")");		
	}	 
	
	public static Location locateLargest(double[][] a){		
		Location location = new Location();		
		location.maxValue = a[0][0];		
		location.row = 0;	
		location.column = 0;		
		for(int row = 0; row < a.length; row++){	
			for(int column = 0; column < a[1].length; column++){	
				if(location.maxValue < a[row][column])	{			
					location.maxValue = a[row][column];		
					location.row = row;				
					location.column = column;		
				}		
			}		
		}	
		return location;	
	}	
}

public class Location {
	public int row, column;
	public double maxValue;
}
