#include<malloc.h>
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
typedef struct kk {
	char data;
	struct kk *lchild;
	struct kk *rchild;
}kk, *ptr;
int i = -1;
char s[1000];
ptr tree(char s[1000]){  // 建结点
	ptr bt;
	if (s[++i] != '.'){
		bt = (ptr)malloc(sizeof(kk));
		bt->data = s[i];
		bt->lchild = tree(s);
		bt->rchild = tree(s);
	}
	else
		bt = NULL; 
	return bt;
}
void postorder(ptr h) {  // 输出后序序列
	if (h){
		postorder(h->lchild);
		postorder(h->rchild);
		printf("%c", h->data);
	}
}
ptr FreeTree(ptr h){
	if (h){
		FreeTree(h->lchild);    // 递归释放其左子树 
		FreeTree(h->rchild);    // 递归释放其右子树 
		free(h);                // 释放根节点 
		h = NULL;               // 释放指向根节点的指针 
	}
	return h;                   // 返回释放后的根节点NULL 
}
int main() {
	while(scanf("%s",&s)!=EOF){
		ptr h;	
		h = tree(s);
		postorder(h);
		printf("\n");
		FreeTree(h);
		i = -1;
	}
	return 0;
}
