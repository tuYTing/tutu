#include<stdio.h>
#include<string.h>
#include<stdlib.h>
//typedef struct Node;
//typedef Node *tree;
typedef struct Node {
	char data;
	tree lchild, rchild;
}Node,*tree;						
tree ptr;
int i = -1;
char s[1000];
void build(tree &ptr) {  // 建树
	if (s[++i] != '.') {
		ptr = (tree)malloc(sizeof(Node));
		ptr->data = s[i];
		build(ptr->lchild);
		build(ptr->rchild);
	}
}
void inorder(tree ptr) {  // 输出中序序列
	if (ptr) {
		inorder(ptr->lchild);
		printf("%c", ptr->data);
		inorder(ptr->rchild);
	}
}
int main() {
	while (scanf_s("%c", &s[0]) != EOF) {
		for (int j = 1; j < s[j] != '\0'; j++) {
			scanf_s("%c", &s[j]);
		}
		build(ptr);
		inorder(ptr);
	}
	return 0;
}


/*#include<iostream>
#include<cstdio>
#include<cstring>
#include<cmath>
#include<algorithm>
#include<string>
#include<cstdlib>
#include<queue>
#include<vector>
#define INF 0x3f3f3f3f
#define PI acos(-1.0)
#define N 101
#define MOD 123
#define E 1e-6
using namespace std;
typedef struct Node;
typedef Node *tree;
struct Node {
	char data;
	tree lchild, rchild;
};
tree bt;
int i = -1;
string s;
void build(tree &bt)//建树
{
	if (s[++i] != '.')
	{
		bt = new Node;
		bt = new Node;
		bt->data = s[i];
		build(bt->lchild);
		build(bt->rchild);
	}
	else
		bt = NULL;
}
void inorder(tree bt)//输出中序序列
{
	if (bt)
	{
		inorder(bt->lchild);
		cout << bt->data;
		inorder(bt->rchild);
	}
}
void postorder(tree bt)//输出后序序列
{
	if (bt)
	{
		postorder(bt->lchild);
		postorder(bt->rchild);
		cout << bt->data;
	}
}
int main()
{
	cin >> s;
	build(bt);
	inorder(bt);
	cout << endl;
	postorder(bt);
	cout << endl;
	return 0;
}*/

#include<stdio.h>
#include<string.h>
#include<stdlib.h>
char s[1000];
typedef struct Node {
	char data;
 struct Node* lchild;
 struct	Node* rchild;
}Node,*ptr;
int i =0;
ptr tree(){//建结点
	ptr bt;
	char k;
	scanf("%c",&k);
	if (k == '.'){
		bt = NULL; 
	}
	else{
		bt = (ptr)malloc(sizeof(Node));
		bt->data =k;
		bt->lchild=tree();
		bt->rchild=tree();
	}

	return bt;
}


void inorder(ptr T)
{
if (T)            // T != NULL 
	{
		inorder(T->lchild);  //递归周游其左子
		printf("%c", T->data );
		inorder(T->rchild);           //递归周游其右子树 
	}
}

/*void inorder(ptr h) {  // 输出中序序列
	if (h) {
		inorder(h->lchild);
		printf("%c", h->data);
		inorder(h->rchild);
	}
}*/
//释放空间
ptr FreeTree(ptr T)
{
	if (T)
	{
		FreeTree(T->lchild);            //递归释放其左子树 
		FreeTree(T->rchild);           //递归释放其右子树 
		free(T);                      //释放根节点 
		T = NULL;                     //释放指向根节点的指针 
	}
	return T;           //返回释放后的根节点NULL 
}


int main() {
	
	ptr h;	
	h=tree();
	inorder(h);
	printf("\n");
	FreeTree(h);	
	return 0;
}
